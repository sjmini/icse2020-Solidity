/**
 * *****************************************************************************
 * Copyright (c) 2018, KAIST.
 * All rights reserved.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 * ****************************************************************************
 */

/*
 * Definition of Solidity identifiers.
 */
module kr.ac.kaist.saf.parser.Identifier(Symbol, Keyword, Unicode);

import Symbol;
import Keyword;
import Unicode;

option setOfString(SOLIDITY_RESERVED);

transient String id       = s:(idstart idrest*) &{ !SOLIDITY_RESERVED.contains(s) };
transient String idname   = s:(idstart idrest*) &{ !SOLIDITY_RESERVED.contains(s) };
transient String idstart  = UnicodeLetter / [$] / [_] / [\\] UnicodeEscapeSequence ;
transient String idrest   = idstart / UnicodeCombiningMark / UnicodeDigit / UnicodeConnectorPunctuation
                         / [\u200c-\u200d] ; // <ZWNJ> <ZWJ> ;
transient String UnicodeEscapeSequence = [u] HexDigit HexDigit HexDigit HexDigit;
transient String HexDigit = [0-9] / [a-f] / [A-F] ;

private String IdText  = a1:id;
private String IdTextName  = a1:idname;

/* Identifier = [a-zA-Z_$] [a-zA-Z_$0-9]* */
transient Id Id =
     a1:IdText
     { String id = NodeUtil.convertUnicode(a1);
       yyValue = new Id(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)), id); };

transient Id IdName =
     a1:IdTextName
     { String id = NodeUtil.convertUnicode(a1);
       yyValue = new Id(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)), id); };
