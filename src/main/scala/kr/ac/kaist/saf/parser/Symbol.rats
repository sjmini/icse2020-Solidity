/**
 * *****************************************************************************
 * Copyright (c) 2018, KAIST.
 * All rights reserved.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 * ****************************************************************************
 */

/*
 * Definition of Solidity symbols and operators.
 */
module kr.ac.kaist.saf.parser.Symbol(Identifier, Spacing, Keyword);

import Identifier;
import Spacing;
import Keyword;

option setOfString(SOLIDITY_RESERVED);

transient void semicolon = ";";
transient void colon = ":";
transient String comma = ",";
transient String star = "*";
transient void underscore = "_";
transient void openparen = "(";
transient void closeparen = ")";
transient void opencurly = "{";
transient void closecurly = "}";
transient void opensquare = "[";
transient void closesquare = "]";
transient String dot   = ".";

transient Op equals = "=" !("=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "="); };
transient Op plus = "+" !("+" / "=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "+"); };
transient Op minus = "-" !("-" / "=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "-"); };
transient Op doubleplus = "++"
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "++"); };
transient Op doubleminus = "--" !(">")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "--"); };
transient Op doublestar = "**"
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "**"); };
transient Op tilde = "~"
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "~"); };
transient Op bang = "!"
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "!"); };
transient Op and = "&" !("&" / "=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "&"); };
transient Op ands = "&&"
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "&&"); };
transient Op bar = "|" !("|" / "=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "|"); };
transient Op bars = "||"
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "||"); };
transient Op caret = "^" !("=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "^"); };
transient Op question = "?" !("=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "?"); };

/*
 * AssignmentOp ::= *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=
 */
transient Op AssignmentOp =
     a1:("*" / "/" / "%" / "+" / "-" / "<<" / ">>" / "&" / "^" / "|") equals
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), a1+"="); };

/*
 * EqualityOp ::= == | !=
 */
transient Op EqualityOp =
     a1:("==" / "!=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), a1); };

/*
 * RelationalOp ::= < | > | <= | >=
 */
transient Op RelationalOp =
     a1:("<=" / ">=" / "<" / ">")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), a1); };

/*
 * ShiftOp ::= << | >>
 */
transient Op ShiftOp =
     a1:("<<" / ">>") !("=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), a1); };

/*
 * AdditiveOp ::= + | -
 */
transient Op AdditiveOp =
     yyValue:(plus / minus);

/*
 * MultiplicativeOp ::= ** / * | / | %
 */
transient Op MultiplicativeOp =
     a1:("**" / "*" / "/" / "%") !("=")
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), a1); };
