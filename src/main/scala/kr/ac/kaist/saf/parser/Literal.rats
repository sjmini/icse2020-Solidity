/**
 * *****************************************************************************
 * Copyright (c) 2018, KAIST.
 * All rights reserved.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 * ****************************************************************************
 */

/*
 * Definition of Solidity literal expressions
 */
module kr.ac.kaist.saf.parser.Literal(Expression, Symbol, Identifier, Keyword, Spacing);

import Expression;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

/*
 * Literal = BooleanLiteral | NumberLiteral | HexLiteral | StringLiteral
 */
Literal Literal =
     true
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new Bool(NodeUtil.makeASTNodeInfo(span), true);
     }
   / false
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new Bool(NodeUtil.makeASTNodeInfo(span), false);
     }
   / NumberLiteral
   / HexLiteral
   / StringLiteral
   ;

/* NumberLiteral = ( HexNumber | DecimalNumber ) (w NumberUnit)? */
NumberLiteral NumberLiteral =
     HexNumber !(idrest) (w NumberUnit)?
   / DecimalNumber !(idrest) (w NumberUnit)? ;

/* HexNumber = '0x' [0-9a-fA-F]+ */
// EXTENSION: '0X' [0-9a-fA-F]+
NumberLiteral HexNumber =
     ("0x" / "0X") a1:HexDigits
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new IntLiteral(NodeUtil.makeASTNodeInfo(span), new BigInteger(a1, 16), 16);
     }
   / "hex" w "'" w "'"
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new IntLiteral(NodeUtil.makeASTNodeInfo(span), new BigInteger("0", 16), 16);
     }
   / "hex" w "\"" w "\""
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new IntLiteral(NodeUtil.makeASTNodeInfo(span), new BigInteger("0", 16), 16);
     }
   / "hex" w "'" a1:HexDigits w "'"
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new IntLiteral(NodeUtil.makeASTNodeInfo(span), new BigInteger(a1, 16), 16);
     }
   / "hex" w ["] a1:HexDigits w ["]
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new IntLiteral(NodeUtil.makeASTNodeInfo(span), new BigInteger(a1, 16), 16);
     };

private transient String HexDigit = [0-9a-fA-F] ;
private transient String HexDigits = HexDigit+ ;
private transient String HexDigit2 =
     a1:HexDigit a2:HexDigit
     { yyValue = a1+a2; };

transient void NumberUnit =
     "days" !(idrest)
   / "ether" !(idrest)
   / "finney" !(idrest)
   / "hours" !(idrest)
   / "minutes" !(idrest)
   / "seconds" !(idrest)
   / "szabo" !(idrest)
   / "weeks" !(idrest)
   / "wei" !(idrest)
   / "years" !(idrest)
   ;

/* DecimalNumber = [0-9]+ ( dot [0-9]* )? ( [eE] [0-9]+ )? */
private NumberLiteral DecimalNumber =
    a1:DecimalDigits a2:(void:dot DecimalDigits)? a3:ExponentPart?
    &{ Character.isDigit(a1.charAt(0)) || a1.charAt(0) == '.' }
     { Span span = createSpan(yyStart,yyCount);
       String dot = "";
       if (a2 == null) a2 = ""; else dot = ".";
       if (a3 == null) a3 = "";
       yyValue = makeNumberLiteral(writer, span, a1, dot, a2, a3);
     }
  / dot a1:DecimalDigits? a2:ExponentPart?
    &{ (a1 != null) && (Character.isDigit(a1.charAt(0)) || a1.charAt(0) == '.') }
     { Span span = createSpan(yyStart,yyCount);
       if (a1 == null) a1 = "";
       if (a2 == null) a2 = "";
       yyValue = makeNumberLiteral(writer, span, "", ".", a1, a2);
     };
transient String DecimalDigits = [0-9]+ ;

/*
 * ExponentPart ::= (e | E) DecimalDigit+
 */
private transient String ExponentPart =
     ([eE]) a1:DecimalDigits
     { yyValue = "e"+a1; };

// EXTENSION: Changed * to + !!!
/* HexLiteral =
 *   'hex' ( '"' ([0-9a-fA-F]{2})+ '"'
 *         | '\'' ([0-9a-fA-F]{2})+ '\'' )
 */
NumberLiteral HexLiteral =
     "hex" ["] a1s:HexDigit2+ ["]
     { Span span = createSpan(yyStart,yyCount);
       String digits = "";
       for (String c : (List<String>)a1s.list()) digits = digits.concat(c);
       yyValue = new IntLiteral(NodeUtil.makeASTNodeInfo(span), new BigInteger(digits, 16), 16);
     }
   / "hex" ['] a1s:HexDigit2+ [']
     { Span span = createSpan(yyStart,yyCount);
       String digits = "";
       for (String c : (List<String>)a1s.list()) digits = digits.concat(c);
       yyValue = new IntLiteral(NodeUtil.makeASTNodeInfo(span), new BigInteger(digits, 16), 16);
     };

/* StringLiteral = '"' ([^"\r\n\\] | '\\' .)* '"' */
transient StringLiteral StringLiteral =
     ["] a1s:DoubleStringCharacter* ["]
     { String str = "";
       for (String c : (List<String>)a1s.list()) str = str.concat(c);
       yyValue = new StringLiteral(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount+1)), "\"", str);
     }
   / ['] a1s:SingleStringCharacter* [']
     { String str = "";
       for (String c : (List<String>)a1s.list()) str = str.concat(c);
       yyValue = new StringLiteral(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount+1)), "\'", str);
     };

private transient String DoubleStringCharacter =
     a1:'\\' a2:EscapeSequence { yyValue = a2; }
   / a1:'\\' { yyValue = "\\"; }
   / LineContinuation
   / a1:(!NonDoubleStringChar _) { yyValue = String.valueOf(a1); }
   ;

private transient String EscapeSequence =
     a1:[nr"'\\]
     { switch (a1) {
           case 'n': { yyValue = "\\n"; break; }
           case 'r': { yyValue = "\\r"; break; }
           case '"': { yyValue = "\\\""; break; }
           case '\'': { yyValue = "\\'"; break; }
           case '\\': { yyValue = "\\\\"; break; }
           default : { yyValue = ""; break; }
       }
     }
   / a1:(!EscapeCharOrLT _) { yyValue = "\\"+a1+""; }
   / [0] !([0-9]) { yyValue = "\\0"; }
   / a1:[x] a2:HexDigit a3:HexDigit { yyValue = "\\"+a1+a2+a3; }
   / a1:[u] a2:HexDigit a3:HexDigit a4:HexDigit a5:HexDigit { yyValue = "\\"+a1+a2+a3+a4+a5; }
   ;

private transient String EscapeCharOrLT =
     a1:[0-9xu] { yyValue = a1+""; }
   / LineTerminator ;

private transient String LineContinuation =
     a1:'\\' a2:LineTerminatorSequence { yyValue = a1+a2; };

private transient String NonDoubleStringChar =
     a1:["\\] { yyValue = a1+""; }
   / LineTerminatorNoMC ;

private transient String SingleStringCharacter =
     a1:'\\' a2:EscapeSequence { yyValue = a2; }
   / LineContinuation
   / a1:(!NonSingleStringChar _) { yyValue = a1+""; }
   ;

private transient String NonSingleStringChar =
     a1:['\\] { yyValue = a1+""; } //'
   / LineTerminatorNoMC ;

/* TypeName ::=
 *   ElementaryTypeName
 * | UserDefinedTypeName
 * | Mapping
 * | FunctionTypeName
 * | ArrayTypeName
 */
TypeName TypeName =
    seed:TypeNameFront list:TypeNameTail*
    { yyValue = (TypeName)apply(list, seed); };

TypeName TypeNameFront =
     a1:ElementaryTypeName
     { yyValue = new ElementaryTypeName(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount+1)), a1); }
   / UserDefinedTypeName
   / Mapping
   / FunctionTypeName
   ;

constant transient Action<TypeName> TypeNameTail =
   (w payable)? ArrayType ;

// TypeName w opensquare (w Expression)? w closesquare
// EXTENSION: TypeName w opensquare (w Expression)? w closesquare w Args
/* ArrayTypeName ::= TypeName w opensquare (w Expression)? w closesquare */
// Ignore (w Args)?
constant inline Action<TypeName> ArrayType =
     w opensquare a1:(w Expression)? w closesquare (w Args)?
     { yyValue = new Action<TypeName>() {
             public TypeName run(TypeName base) {
                 SourceLoc loc = base.span().begin();
                 Span last;
                 if (a1 == null) last = base.span();
                 else last = a1.span();
                 Option<Expression> size;
                 if (a1 == null) size = Option.<Expression>apply(null);
                 else size = Some.<Expression>apply(a1);
                 Span span = new Span(base.span().fileName(),
                                      loc.line(), last.end().line(),
                                      loc.column(), last.end().column()+1,
                                      base.info().span().begin().offset(),
                                      last.end().offset()+1);
                 return new ArrayTypeName(NodeUtil.makeASTNodeInfo(span),
                                          (TypeName)base, size);
             }};
     };

/* ElementaryTypeNameExpression ::= ElementaryTypeName
 * ElementaryTypeName ::=
 *   address | bool | string | var | Int | Uint | Byte | Fixed | Ufixed
 */
transient String ElementaryTypeName =
     yyValue:address 
   / yyValue:bool
   / yyValue:string
   / yyValue:var
   / yyValue:Int
   / yyValue:Uint
   / yyValue:Byte
   / yyValue:Fixed
   / yyValue:Ufixed
   ;

/* Fixed ::= fixed / ( fixed [0-9]+ x [0-9]+ ) */
// Ignore fixed size
transient String Fixed =
     yyValue:fixed ( DecimalDigits [x] DecimalDigits )? ;

/* Ufixed ::= ufixed / ( ufixed [0-9]+ x [0-9]+ ) */
// Ignore ufixed size
transient String Ufixed =
     yyValue:ufixed ( DecimalDigits [x] DecimalDigits )? ;

/* UserDefinedTypeName ::= Id (dot w Id)* */
TypeName UserDefinedTypeName =
     a1:Id a2s:(void:dot Id)*
     { List<Id> names;
       if (a2s.list().isEmpty()) names = list(a1);
       else names = cons(a1, a2s.list());
       yyValue = new UserDefinedTypeName(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)),
                                         toList(names));
     };

/* Mapping ::= mapping w openparen w ElementaryTypeName w => w TypeName closeparen */
TypeName Mapping =
     mapping w openparen w a1:ElementaryTypeName w "=>" w a2:TypeName (w payable)? w closeparen
     { yyValue = new Mapping(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount+1)), a1, a2); };

/* FunctionTypeName ::=
 *   function w FunctionTypeParameterList
 *   (w internal | w external | w StateMutability)*
 *   (w returns w FunctionTypeParameterList)?
 */
// Ignore w FunctionTypeParameterList
//        (w internal | w external | w StateMutability)*
//        (w returns w FunctionTypeParameterList)?
TypeName FunctionTypeName =
     function w FunctionTypeParameterList
     (w internal / w external / w StateMutability)*
     (w returns w FunctionTypeParameterList)?
     { yyValue = new FunctionTypeName(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount+1))); };

/* FunctionTypeParameterList ::=
 *   openparen (w FunctionTypeParameter (w comma w FunctionTypeParameter)*)? w closeparen
 */
transient void FunctionTypeParameterList =
     openparen (w FunctionTypeParameter (w comma w FunctionTypeParameter)*)?
     w closeparen ;

/* FunctionTypeParameter ::= TypeName (w StorageLocation)? */
transient void FunctionTypeParameter =
     TypeName (w StorageLocation)? ;

/*
 * IdList ::= Id (w comma w Id)*
 */
List<Id> IdList =
     a1:Id a2s:(w void:comma w Id)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * IdOrList ::=
 *   openparen w IdList w closeparen
 * | Id
 */
List<Id> IdOrList =
     openparen w yyValue:IdList w closeparen
   / a1:Id
     { yyValue = list(a1); };

/*
 * OptIds ::= openparen w OptIdList
 */
List<Option<Id>> OptIds =
     openparen w yyValue:OptIdList ;

/*
 * OptIdList ::=
 *   Id w comma w OptIdList
 * | w comma w OptIdList
 * | Id w closeparen
 * | closeparen
 */
List<Option<Id>> OptIdList =
     a1:Id w comma w a2:OptIdList
     { yyValue = cons(Some.<Id>apply(a1), a2); }
   / w comma w a1:OptIdList
     { yyValue = cons(Option.<Id>apply(null), a1); }
   / a1:Id w closeparen 
     { yyValue = list(Some.<Id>apply(a1)); }
   / closeparen 
     { yyValue = Collections.<Option<Id>>emptyList(); }
   ;
