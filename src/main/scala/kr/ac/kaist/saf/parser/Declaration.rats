/**
 * *****************************************************************************
 * Copyright (c) 2018, KAIST.
 * All rights reserved.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 * ****************************************************************************
 */

/*
 * Definition of Solidity contracts
 */
module kr.ac.kaist.saf.parser.Declaration(Statement, Expression, Literal, Symbol,
                                          Identifier, Keyword, Spacing);

import Statement;
import Expression;
import Literal;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

/*
 * SourceUnit ::= SourceElements
 */
public SourceUnit File =
     initParser a2:SourceElements? closeParser
     { Span span = createSpan(yyStart,yyCount);
       ASTNodeInfo info = NodeUtil.makeASTNodeInfo(span);
       scala.collection.immutable.List<SourceElement> ses;
       if (a2 == null) ses = nilSes;
       else ses = toList(a2);
       HashMap<String, Span> map = new HashMap<String, Span>();
       yyValue = new SourceUnit(info, ses);
     };
void initParser = w { initParser(); };
void closeParser = w EndOfFile
     { writer.close();
       fw.close();
     };

/*
 * SourceElements ::= (w SourceElement)*
 */
private List<SourceElement> SourceElements =
     a1:SourceElement a2s:(w SourceElement)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * SourceElement ::=
 *   PragmaDirective
 * | ImportDirective
 * | ContractDefinition
 */
private SourceElement SourceElement =
     PragmaDirective
   / ImportDirective
   / ContractDefinition
   ;

// Pragma actually parses anything up to the trailing ';' to be fully
// forward-compatible.
/*
 * PragmaDirective ::= pragma w Id w [^;]+ w semicolon
 */
// EXTENSION: allows any version syntax
PragmaDirective PragmaDirective =
     pragma w a1:Id w PragmaVersionChar+ w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new PragmaDirective(info, a1);
     };

/*
 * ImportDirective ::=
 *   import w StringLiteral (w as w Id)? w semicolon
 * | import (w star | w Id) (w as w Id)? w from w StringLiteral w semicolon
 * | import w opencurly w Id (w as w Id)? (w comma w Id (w as w Id)?)* w closecurly
 *   w from w StringLiteral w semicolon
 */
ImportDirective ImportDirective =
     import w a1:StringLiteral a2:(w as w Id)? w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Id id = new Id(info, a1.str());
       Option<Id> alias;
       if (a2 == null) alias = Option.<Id>apply(null);
       else alias = Some.<Id>apply(a2);
       yyValue = new Import(info, new Alias(info, id, alias));
     }
   / import w star a1:(w as w Id)? w from w a2:StringLiteral w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Option<Id> alias;
       if (a1 == null) alias = Option.<Id>apply(null);
       else alias = Some.<Id>apply(a1);
       Id module = new Id(info, a2.str());
       yyValue = new ImportAll(info, alias, module.name());
     }
   / import w a1:Alias w from w a2:StringLiteral w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Id module = new Id(info, a2.str());
       yyValue = new ImportFrom(info, toList(list(a1)), module.name());
     }
   / import w opencurly w a1:Alias a2s:(w void:comma w Alias)*
     w closecurly w from w a3:StringLiteral w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Id module = new Id(info, a3.str());
       yyValue = new ImportFrom(info, toList(cons(a1, a2s.list())), module.name());
     };

/*
 * Alias ::= Id (w as w Id)?
 */
Alias Alias = a1:Id a2:(w as w Id)?
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Option<Id> alias;
       if (a2 == null) alias = Option.<Id>apply(null);
       else alias = Some.<Id>apply(a2);
       yyValue = new Alias(info, a1, alias);
     };

/*
 * ContractDefinition ::=
 *   DefinitionKind w Id (w is w InheritanceSpecifierList)?
 *   w opencurly (w ContractPartList)? w closecurly                    
 */
ContractDefinition ContractDefinition =
     a1:DefinitionKind w a2:Id a3:(w is w InheritanceSpecifierList)?
     w opencurly a4:(w ContractPartList)? w closecurly                    
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       scala.collection.immutable.List<InheritanceSpecifier> supers;
       if (a3 == null) supers = nilSupers;
       else supers = toList(a3);
       scala.collection.immutable.List<ContractPart> body;
       if (a4 == null) body = nilCPs;
       else body = toList(a4);
       yyValue = new ContractDefinition(info, a1, a2, supers, body);
     };

/*
 * DefinitionKind ::= contract | library | interface
 */
DefinitionKind DefinitionKind =
     contract  { yyValue = new ContractKind(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / library   { yyValue = new LibraryKind(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / interface { yyValue = new InterfaceKind(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   ;

/*
 * InheritanceSpecifierList ::=
 *   InheritanceSpecifier (w comma w InheritanceSpecifier)*
 */
List<InheritanceSpecifier> InheritanceSpecifierList =
     a1:InheritanceSpecifier a2s:(w void:comma w InheritanceSpecifier)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * InheritanceSpecifier ::=
 *   UserDefinedTypeName (w Expressions)?
 */
InheritanceSpecifier InheritanceSpecifier =
     a1:UserDefinedTypeName a2:(w Expressions)?
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       scala.collection.immutable.List<Expression> args;
       if (a2 == null) args = nilExprs;
       else args = toList(a2);
       yyValue = new InheritanceSpecifier(info, a1, args);
     };

/*
 * Expressions ::= openparen (w ExpressionList)? w closeparen
 */
List<Expression> Expressions =
     openparen w yyValue:ExpressionList w closeparen
   / openparen w closeparen
     { yyValue = Collections.<Expression>emptyList(); };

/*
 * ExpressionList ::= Expression (w comma w Expression)*
 */
List<Expression> ExpressionList =
     a1:Expression a2s:(w void:comma w Expression)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * ContractPartList ::= ContractPart (w ContractPart)*
 */
List<ContractPart> ContractPartList =
     a1:ContractPart a2s:(w ContractPart)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * ContractPart ::=
 *   StateVariableDeclaration
 * | UsingForDeclaration
 * | StructDefinition
 * | ModifierDefinition
 * | FunctionDefinition
 * | EventDefinition
 * | EnumDefinition
 */
ContractPart ContractPart =
     StateVariableDeclaration
   / UsingForDeclaration
   / StructDefinition
   / ModifierDefinition
   / FunctionDefinition
   / EventDefinition
   / EnumDefinition
   ;

/*
 * StateVariableDeclaration ::=
 *   TypeName (w ModList)? w Id (w equals w Expression)? w semicolon
 */
StateVariableDeclaration StateVariableDeclaration =
     a1:TypeName a2:(w ModList)? w a3:Id a4:(w void:equals w Expression)? w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       scala.collection.immutable.List<Mod> mods;
       if (a2 == null) mods = nilMods;
       else mods = toList(a2);
       Option<Expression> body;
       if (a4 == null) body = Option.<Expression>apply(null);
       else body = Some.<Expression>apply(a4);
       yyValue = new StateVariableDeclaration(info, a1, mods, a3, body);
     };

/*
 * UsingForDeclaration = using w Id w for w (star | TypeName) w semicolon
 */
UsingForDeclaration UsingForDeclaration =
     using w a1:Id w for w star w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new UsingForDeclaration(info, a1, "*");
     }
   / using w a1:Id w for w a2:TypeName w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new UsingForDeclaration(info, a1, a2.toString(0));
     };

/*
 * StructDefinition ::=
 *   struct w Id w opencurly w VariableDeclarationList w closecurly
 */
StructDefinition StructDefinition =
     struct w a1:Id w opencurly w closecurly
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new StructDefinition(info, a1, nilVDs);
     }
   / struct w a1:Id w opencurly w a2:VariableDeclarationList w closecurly
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new StructDefinition(info, a1, toList(a2));
     };

/*
 * VariableDeclarationList ::=
 *   VariableDeclaration w semicolon (w VariableDeclaration w semicolon)*
 */
List<VariableDeclaration> VariableDeclarationList =
     a1:VariableDeclaration w semicolon a2s:(w VariableDeclaration w semicolon)*
     { yyValue = cons(a1, a2s.list()); };

// semantic restriction: mappings and structs (recursively) containing mappings
// are not allowed in argument lists
/*
 * VariableDeclaration ::= TypeName (w StorageLocation)? w Id
 */
VariableDeclaration VariableDeclaration =
     a1:TypeName w a2:StorageLocation w a3:Id
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new VariableDeclaration(info, a1, Some.<StorageLocation>apply(a2), a3);
     }
   / a1:TypeName w calldata
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new VariableDeclaration(info, a1, Option.<StorageLocation>apply(null),
                                         new Id(info, "calldata"));
     }
   / a1:TypeName w a2:Id
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new VariableDeclaration(info, a1, Option.<StorageLocation>apply(null), a2);
     };

/*
 * ModifierDefinition ::= modifier w Id (w Params)? w Block
 */
ModifierDefinition ModifierDefinition =
    modifier w a1:Id a2:(w Params)? w a3:Block
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       scala.collection.immutable.List<Parameter> params;
       if (a2 == null) params = nilParams;
       else params = toList(a2);
       yyValue = new ModifierDefinition(info, a1, params, toList(a3));
     };

/*
 * Params ::= openparen (w ParameterList)? w closeparen
 */
List<Parameter> Params =
     openparen a1:(w ParameterList)? w closeparen
     { if (a1 == null) yyValue = Collections.<Parameter>emptyList();
       else yyValue = a1;
     };

/*
 * ParameterList ::= Parameter (w comma w Parameter)*
 */
List<Parameter> ParameterList =
     a1:Parameter a2s:(w void:comma w Parameter)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * Parameter ::= TypeName (w StorageLocation)? (w Id)?
 */
Parameter Parameter =
     a1:TypeName a2:(w StorageLocation)? a3:(w Id)?
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Option<StorageLocation> loc;
       if (a2 == null) loc = Option.<StorageLocation>apply(null);
       else loc = Some.<StorageLocation>apply(a2);
       Option<Id> name;
       if (a3 == null) name = Option.<Id>apply(null);
       else name = Some.<Id>apply(a3);
       yyValue = new Parameter(info, a1, loc, name);
     };

/*
 * FunctionDefinition ::=
 *   function (w Id)? w Params (w FtnMods)? (w returns w Params)? (semicolon | Block)
 */
FunctionDefinition FunctionDefinition =
     function a1:(w Id)? w a2:Params a3:(w FtnMods)? a4:(w returns w Params)? w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Option<Id> name;
       if (a1 == null) name = Option.<Id>apply(null);
       else name = Some.<Id>apply(a1);
       scala.collection.immutable.List<FtnMod> mods;
       if (a3 == null) mods = nilFtnMods;
       else mods = toList(a3);
       scala.collection.immutable.List<Parameter> result;
       if (a4 == null) result = nilParams;
       else result = toList(a4);
       yyValue = new FunctionDefinition(info, name, toList(a2), mods, result, nilStmts, comment);
       comment = "";
     }
   / function a1:(w Id)? w a2:Params a3:(w FtnMods)? a4:(w returns w Params)? w a5:Block
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Option<Id> name;
       if (a1 == null) name = Option.<Id>apply(null);
       else name = Some.<Id>apply(a1);
       scala.collection.immutable.List<FtnMod> mods;
       if (a3 == null) mods = nilFtnMods;
       else mods = toList(a3);
       scala.collection.immutable.List<Parameter> result;
       if (a4 == null) result = nilParams;
       else result = toList(a4);
       yyValue = new FunctionDefinition(info, name, toList(a2), mods, result, toList(a5), comment);
       comment = "";
     }
   / constructor w a1:Params a2:(w FtnMods)? w a3:Block
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Option<Id> name = Some.<Id>apply(new Id(info, "constructor"));
       scala.collection.immutable.List<FtnMod> mods;
       if (a2 == null) mods = nilFtnMods;
       else mods = toList(a2);
       yyValue = new FunctionDefinition(info, name, toList(a1), mods, nilParams, toList(a3), comment);
       comment = "";
     };

/*
 * EventDefinition ::=
 *   event w Id w openparen (w EventParameterList)? w closeparen (w anonymous)? w semicolon
 */
// Ignore (w anonymous)?
EventDefinition EventDefinition =
     event w a1:Id w openparen a2:(w EventParameterList)? w closeparen 
     (w anonymous)? w semicolon
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       scala.collection.immutable.List<EventParameter> params;
       if (a2 == null) params = nilEventParams;
       else params = toList(a2);
       yyValue = new EventDefinition(info, a1, params);
     };

/*
 * EventParameterList ::= EventParameter (w comma w EventParameter)*
 */
List<EventParameter> EventParameterList =
     a1:EventParameter a2s:(w void:comma w EventParameter)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * EventParameter ::= TypeName (w indexed)? (w Id)?
 */
// Ignore (w indexed)?
EventParameter EventParameter =
     a1:TypeName (w indexed)? a2:(w Id)?
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       Option<Id> name;
       if (a2 == null) name = Option.<Id>apply(null);
       else name = Some.<Id>apply(a2);
       yyValue = new EventParameter(info, a1, name);
     };

/*
 * EnumDefinition ::=
 *   enum w Id w opencurly (w EnumValueList)? w closecurly
 */
EnumDefinition EnumDefinition =
     enum w a1:Id w opencurly w closecurly 
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new EnumDefinition(info, a1, nilIds);
     }
   / enum w a1:Id w opencurly w a2:EnumValueList w closecurly 
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new EnumDefinition(info, a1, toList(a2));
     };

/*
 * EnumValueList ::= Id (w comma w Id)*
 */
List<Id> EnumValueList =
     a1:Id a2s:(w void:comma w Id)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * FtnMods ::= FtnMod (w FtnMod)*
 */
List<FtnMod> FtnMods =
     a1:FtnMod a2s:(w FtnMod)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * FtnMod ::= ModifierInvocation | StateMutability | external
 *          | internal | private | public
 */
FtnMod FtnMod =
     ModifierInvocation
   / StateMutability
   / external { yyValue = new External(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / internal { yyValue = new Internal(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / private  { yyValue = new Private(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / public   { yyValue = new Public(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); };

/*
 * ModifierInvocation ::= Id (w openparen (w ExpressionList)? w closeparen)?
 */
ModifierInvocation ModifierInvocation =
     a1:Id w openparen a2:(w ExpressionList)? w closeparen
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       scala.collection.immutable.List<Expression> exprs;
       if (a2 == null) exprs = nilExprs;
       else exprs = toList(a2);
       yyValue = new ModifierInvocation(info, a1, exprs);
     }
   / a1:Id
     { ASTNodeInfo info = NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount));
       yyValue = new ModifierInvocation(info, a1, nilExprs);
     };

/*
 * ModList ::= Mod (w Mod)*
 */
List<Mod> ModList =
     a1:Mod a2s:(w Mod)*
     { yyValue = cons(a1, a2s.list()); };

/*
 * Mod ::= constant | external | internal | private | public
 */
Mod Mod =
     constant { yyValue = new Constant(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / external { yyValue = new External(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / internal { yyValue = new Internal(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / private  { yyValue = new Private(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / public   { yyValue = new Public(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / payable  { yyValue = new Payable(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   ;
