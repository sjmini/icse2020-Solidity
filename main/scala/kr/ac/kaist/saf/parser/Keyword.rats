/**
 * *****************************************************************************
 * Copyright (c) 2018, KAIST.
 * All rights reserved.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 * ****************************************************************************
 */

/*
 * Definition of Solidity keywords.
 */
module kr.ac.kaist.saf.parser.Keyword(Identifier);

import Identifier;

body {
  static {
    add(SOLIDITY_RESERVED, new String[] {
        "anonymous",    "assembly",     "as",           "break",
        "case",         "constant",
        "contract",        "continue",     "default",      "delete",
        "do",           "else",         "enum",
        "event",        "external",     "for",
        "function",     "if",           "import",       "indexed",
        "interface",    "internal",     "is",
        "let",          "library",      "mapping",
        "modifier",     "new",          "pragma",
        "private",      "public",       "returns",
        "struct",       "switch",       "throw",        "using",
        "var",          "while"
    });
  }
}

option setOfString(SOLIDITY_RESERVED);

transient Op delete = "delete" !(idrest)
     { yyValue = new Op(NodeUtil.makeASTNodeInfo(createSpan(yyStart, yyCount)), "delete"); };

transient void anonymous = "anonymous" !(idrest);
transient void assembly = "assembly" !(idrest);
transient void as = "as" !(idrest);
transient void break = "break" !(idrest);
transient void calldata = "calldata" !(idrest);
transient void case = "case" !(idrest);
transient String constant = "constant" !(idrest);
transient String constructor = "constructor" !(idrest);
transient void contract = "contract" !(idrest);
transient void continue = "continue" !(idrest);
transient void default = "default" !(idrest);
transient void do = "do" !(idrest);
transient void else = "else" !(idrest);
transient void enum = "enum" !(idrest);
transient void event = "event" !(idrest);
transient String external = "external" !(idrest);
transient void for = "for" !(idrest);
transient void function = "function" !(idrest);
transient void if = "if" !(idrest);
transient void import = "import" !(idrest);
transient void indexed = "indexed" !(idrest);
transient void interface = "interface" !(idrest);
transient String internal = "internal" !(idrest);
transient void is = "is" !(idrest);
transient void let = "let" !(idrest);
transient void library = "library" !(idrest);
transient void mapping = "mapping" !(idrest);
transient void modifier = "modifier" !(idrest);
transient void new = "new" !(idrest);
transient void pragma = "pragma" !(idrest);
transient String private = "private" !(idrest);
transient String public = "public" !(idrest);
transient void returns = "returns" !(idrest);
transient void struct = "struct" !(idrest);
transient void switch = "switch" !(idrest);
transient void throw = "throw" !(idrest);
transient void using = "using" !(idrest);
transient String var = "var" !(idrest);
transient void while = "while" !(idrest);

transient String address = "address" !(idrest);
transient String bool = "bool" !(idrest);
transient void emit = "emit" !(idrest);
transient void false = "false" !(idrest);
transient String fixed = "fixed" !(idrest);
transient void from = "from" !(idrest);
transient void memory = "memory" !(idrest);
transient void payable = "payable" !(idrest);
transient void pure = "pure" !(idrest);
transient void return = "return" !(idrest);
transient void storage = "storage" !(idrest);
transient String string = "string" !(idrest);
transient void true = "true" !(idrest);
transient String ufixed = "ufixed" !(idrest);
transient void view = "view" !(idrest);

transient FtnMod StateMutability =
     constant { yyValue = new Constant(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / payable  { yyValue = new Payable(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / pure     { yyValue = new Pure(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   / view     { yyValue = new View(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   ;

transient StorageLocation StorageLocation =
     calldata { yyValue = new Calldata(); }
   / memory   { yyValue = new Memory(); }
   / storage  { yyValue = new Storage(); }
   / payable  { yyValue = new Payable(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount))); }
   ;

transient String Int =
     "int200" !(idrest) / "int208" !(idrest) / "int216" !(idrest)
   / "int224" !(idrest) / "int232" !(idrest) / "int240" !(idrest)
   / "int248" !(idrest) / "int256" !(idrest) / "int24"  !(idrest)
   / "int32"  !(idrest) / "int40"  !(idrest) / "int48"  !(idrest)
   / "int56"  !(idrest) / "int64"  !(idrest) / "int72"  !(idrest)
   / "int80"  !(idrest) / "int88"  !(idrest) / "int8"   !(idrest)
   / "int96"  !(idrest) / "int104" !(idrest) / "int112" !(idrest)
   / "int120" !(idrest) / "int128" !(idrest) / "int136" !(idrest)
   / "int144" !(idrest) / "int152" !(idrest) / "int160" !(idrest)
   / "int168" !(idrest) / "int176" !(idrest) / "int184" !(idrest)
   / "int192" !(idrest) / "int16"  !(idrest) / "int"    !(idrest)
   ;

transient String Uint =
     "uint200" !(idrest) / "uint208" !(idrest) / "uint216" !(idrest)
   / "uint224" !(idrest) / "uint232" !(idrest) / "uint240" !(idrest)
   / "uint248" !(idrest) / "uint256" !(idrest) / "uint24"  !(idrest)
   / "uint32"  !(idrest) / "uint40"  !(idrest) / "uint48"  !(idrest)
   / "uint56"  !(idrest) / "uint64"  !(idrest) / "uint72"  !(idrest)
   / "uint80"  !(idrest) / "uint88"  !(idrest) / "uint8"   !(idrest)
   / "uint96"  !(idrest) / "uint104" !(idrest) / "uint112" !(idrest)
   / "uint120" !(idrest) / "uint128" !(idrest) / "uint136" !(idrest)
   / "uint144" !(idrest) / "uint152" !(idrest) / "uint160" !(idrest)
   / "uint168" !(idrest) / "uint176" !(idrest) / "uint184" !(idrest)
   / "uint192" !(idrest) / "uint16"  !(idrest) / "uint"    !(idrest)
   ;

transient String Byte =
     "bytes4"  !(idrest) / "bytes5"  !(idrest) / "bytes6"  !(idrest)
   / "bytes7"  !(idrest) / "bytes8"  !(idrest) / "bytes9"  !(idrest)
   / "bytes10" !(idrest) / "bytes11" !(idrest) / "bytes12" !(idrest)
   / "bytes13" !(idrest) / "bytes14" !(idrest) / "bytes15" !(idrest)
   / "bytes16" !(idrest) / "bytes17" !(idrest) / "bytes18" !(idrest)
   / "bytes19" !(idrest) / "bytes20" !(idrest) / "bytes21" !(idrest)
   / "bytes22" !(idrest) / "bytes23" !(idrest) / "bytes24" !(idrest)
   / "bytes25" !(idrest) / "bytes26" !(idrest) / "bytes27" !(idrest)
   / "bytes28" !(idrest) / "bytes29" !(idrest) / "bytes30" !(idrest)
   / "bytes31" !(idrest) / "bytes32" !(idrest) / "bytes1"  !(idrest)
   / "bytes2"  !(idrest) / "bytes3"  !(idrest) / "bytes"   !(idrest)
   / "byte"    !(idrest)
   ;
