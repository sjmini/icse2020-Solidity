/**
 * *****************************************************************************
 * Copyright (c) 2018, KAIST.
 * All rights reserved.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 * ****************************************************************************
 */

/*
 * Definition of Solidity expressions
 */
module kr.ac.kaist.saf.parser.Expression(Declaration, Literal, Symbol,
                                         Identifier, Keyword, Spacing);

import Declaration;
import Literal;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

// Expression w (= | |= | ^= | &= | <<= | >>= | += | -= | *= | /= | %=) w Expression
/*
 * Expression ::=
 *   Conditional
 * | LeftHandSide w = w Expression
 * | LeftHandSide w AssignmentOp w Expression
 */
Expression Expression =
     a1:LeftHandSide w a2:equals w a3:Expression
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new AssignOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2, a3);
     }
   / a1:LeftHandSide w a2:AssignmentOp w a3:Expression
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new AssignOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2, a3);
     }
   / Conditional;

// Expression w ? w Expression w : w Expression
/*
 * Conditional ::=
 *   LogicalOR
 * | LogicalOR w ? w Expression w : w Expression
 */
private transient Expression Conditional =
     a1:LogicalOR w question w a2:Expression w colon w a3:Expression
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new Cond(NodeUtil.makeASTNodeInfo(span), a1, a2, a3);
     }
   / LogicalOR ;

// Expression w || w Expression
/*
 * LogicalOR ::=
 *   LogicalAND
 * | LogicalOR w || w LogicalAND
 */
private transient Expression LogicalOR =
     a1:LogicalAND a2s:LogicalANDR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expression> pair: a2s.list()) {
           Op op = pair._1();
           Expression right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expression> LogicalANDR =
     w a1:bars w a2:LogicalAND
     { yyValue = new Tuple2<Op, Expression>(a1, a2); };

// Expression w && w Expression
/*
 * LogicalAND ::=
 *   BitwiseOR
 * | LogicalAND w && w BitwiseOR
 */
private transient Expression LogicalAND =
     a1:BitwiseOR a2s:BitwiseORR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expression> pair: a2s.list()) {
           Op op = pair._1();
           Expression right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expression> BitwiseORR =
     w a1:ands w a2:BitwiseOR
     { yyValue = new Tuple2<Op, Expression>(a1, a2); };

// Expression w | w Expression
/*
 * BitwiseOR ::=
 *   BitwiseXOR
 * | BitwiseOR w | w BitwiseXOR
 */
private transient Expression BitwiseOR =
     a1:BitwiseXOR a2s:BitwiseXORR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expression> pair: a2s.list()) {
           Op op = pair._1();
           Expression right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expression> BitwiseXORR =
     w a1:bar w a2:BitwiseXOR
     { yyValue = new Tuple2<Op, Expression>(a1, a2); };

// Expression w ^ w Expression
/*
 * BitwiseXOR ::=
 *   BitwiseAND
 * | BitwiseXOR w ^ w BitwiseAND
 */
private transient Expression BitwiseXOR =
     a1:BitwiseAND a2s:BitwiseANDR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expression> pair: a2s.list()) {
           Op op = pair._1();
           Expression right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expression> BitwiseANDR =
     w a1:caret w a2:BitwiseAND
     { yyValue = new Tuple2<Op, Expression>(a1, a2); };

// Expression w & w Expression
/*
 * BitwiseAND ::=
 *   Equality
 * | BitwiseAND w & w Equality
 */
private transient Expression BitwiseAND =
     a1:Equality a2s:EqualityR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expression> pair: a2s.list()) {
           Op op = pair._1();
           Expression right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expression> EqualityR =
     w a1:and w a2:Equality
     { yyValue = new Tuple2<Op, Expression>(a1, a2); };

// Expression w (== | !=) w Expression
/*
 * Equality ::=
 *   Relational
 * | Equality w == w Relational
 * | Equality w != w Relational
 */
private transient Expression Equality =
     a1:Relational a2s:RelationalR*
     { Span span = a1.span();
       yyValue = a1;
       for (Tuple2<Op, Expression> pair: a2s.list()) {
           Op op = pair._1();
           Expression right = pair._2();
           yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, right.span())),
                                    yyValue, op, right);
       }
     };

private transient Tuple2<Op, Expression> RelationalR =
     w a1:EqualityOp w a2:Relational
     { yyValue = new Tuple2<Op, Expression>(a1, a2); };

// Expression w (< | > | <= | >=) w Expression
/*
 * Relational ::=
 *   Shift
 * | Relational w < w Shift
 * | Relational w > w Shift
 * | Relational w <= w Shift
 * | Relational w >= w Shift
 */
private transient Expression Relational =
     a1s:ShiftL+ a2:Shift
     { List<Tuple2<Expression, Op>> ps = a1s.list();
       Tuple2<Expression, Op> first = ps.remove(0);
       Expression left = first._1();
       Op op = first._2();
       Span span = left.span();
       for (Tuple2<Expression, Op> pair: ps) {
           Expression e = pair._1();
           left = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, e.span())),
                                 left, op, e);
           op = pair._2();
       }
       yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)), left, op, a2);
     }
   / Shift ;

private transient Tuple2<Expression, Op> ShiftL =
     a1:Shift w a2:RelationalOp w
     { yyValue = new Tuple2<Expression, Op>(a1, a2); };

// Expression w (<< | >>) w Expression
/*
 * Shift ::=
 *   Additive
 * | Shift w << w Additive
 * | Shift w >> w Additive
 */
transient Expression Shift =
     a1s:AdditiveL+ a2:Additive
     { List<Tuple2<Expression, Op>> ps = a1s.list();
       Tuple2<Expression, Op> first = ps.remove(0);
       Expression left = first._1();
       Op op = first._2();
       Span span = left.span();
       for (Tuple2<Expression, Op> pair: ps) {
           Expression e = pair._1();
           left = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, e.span())),
                                 left, op, e);
           op = pair._2();
       }
       yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)), left, op, a2);
     }
   / Additive ;

private transient Tuple2<Expression, Op> AdditiveL =
     a1:Additive w a2:ShiftOp w
     { yyValue = new Tuple2<Expression, Op>(a1, a2); };

// Expression w (+ | -) w Expression
/*
 * Additive ::=
 *   Multiplicative
 * | Additive w + w Multiplicative
 * | Additive w - w Multiplicative
 */
private transient Expression Additive =
     a1s:MultiplicativeL+ a2:Multiplicative
     { List<Tuple2<Expression, Op>> ps = a1s.list();
       Tuple2<Expression, Op> first = ps.remove(0);
       Expression left = first._1();
       Op op = first._2();
       Span span = left.span();
       for (Tuple2<Expression, Op> pair: ps) {
           Expression e = pair._1();
           left = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, e.span())),
                                 left, op, e);
           op = pair._2();
       }
       yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)), left, op, a2);
     }
   / Multiplicative ;

private transient Tuple2<Expression, Op> MultiplicativeL =
     a1:Multiplicative w a2:AdditiveOp w
     { yyValue = new Tuple2<Expression, Op>(a1, a2); };

// Expression w (* | / | % | **) w Expression
/*
 * Multiplicative ::=
 *   Unary
 * | Multiplicative w ** w Unary
 * | Multiplicative w * w Unary
 * | Multiplicative w / w Unary
 * | Multiplicative w % w Unary
 */
private transient Expression Multiplicative =
     a1s:UnaryL+ a2:Unary
     { List<Tuple2<Expression, Op>> ps = a1s.list();
       Tuple2<Expression, Op> first = ps.remove(0);
       Expression left = first._1();
       Op op = first._2();
       Span span = left.span();
       for (Tuple2<Expression, Op> pair: ps) {
           Expression e = pair._1();
           left = new InfixOpApp(NodeUtil.makeASTNodeInfo(Span.merge(span, e.span())),
                                 left, op, e);
           op = pair._2();
       }
       yyValue = new InfixOpApp(NodeUtil.makeASTNodeInfo(createSpan(yyStart,yyCount)), left, op, a2);
     }
   / Unary ;

private transient Tuple2<Expression, Op> UnaryL =
     a1:Unary w a2:MultiplicativeOp w
     { yyValue = new Tuple2<Expression, Op>(a1, a2); };

// (! | ~ | delete | ++ | -- | + | -) w Expression
/*
 * Unary ::=
 *   Postfix
 * | ! Unary
 * | ~ Unary
 * | delete Unary
 * | ++ Unary
 * | -­ Unary
 * | + Unary
 * | ­ Unary
 */
transient Expression Unary =
     a1:bang w a2:Unary
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new PrefixOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / a1:tilde w a2:Unary
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new PrefixOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / a1:delete w a2:Unary
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new PrefixOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / a1:doubleplus w a2:Unary
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new PrefixOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / a1:doubleminus w a2:Unary
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new PrefixOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / a1:plus w a2:Unary
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new PrefixOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / a1:minus w a2:Unary
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new PrefixOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / Postfix;

// Expression w (++ | --)
/*
 * Postfix ::=
 *   LeftHandSide
 * | LeftHandSide s ++
 * | LeftHandSide s --
 */
private transient Expression Postfix =
     a1:LeftHandSide s a2:doubleplus
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new UnaryAssignOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / a1:LeftHandSide s a2:doubleminus
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new UnaryAssignOpApp(NodeUtil.makeASTNodeInfo(span), a1, a2);
     }
   / LeftHandSide;

/*
 * LeftHandSide ::=
 *   NewExpression
 * | CallExpression
 */
Expression LeftHandSide =
     CallExpression
   / NewExpression
   ;

// FunctionCall ::= Expression w openparen w FunctionCallArguments w closeparen
// FunctionCallArguments ::= opencurly (w NameValueList)? closecurly
//                         | ExpressionList?
// Ignore FunctionCallArguments = '{' NameValueList? '}'
// Ignore NameValuePair ::= Id ':' Expression
// Expression w opensquare (w Expression)? w closesquare
// Expression w dot w Id
/*
 * CallExpression ::=
 *   MemberExpression w Args
 * | CallExpression w Args
 * | CallExpression w [ w Expression w ]
 * | CallExpression w . w IdName
 */
Expression CallExpression =
    seed:CallExpressionFront list:CallExpressionTail*
    { yyValue = (Expression)apply(list, seed); };

Expression CallExpressionFront =
     a1:MemberExpression w a2:Args
     { Span span = createSpan(yyStart,yyCount+1);
       yyValue = new FunctionCall(NodeUtil.makeASTNodeInfo(span), a1, toList(a2));
     };

constant transient Action<Expression> CallExpressionTail =
     FunctionCall
   / Bracket
   / Dot
   ;

constant inline Action<Expression> FunctionCall =
     w a1:Args
     { yyValue = new Action<Expression>() {
             public Expression run(Expression base) {
                 SourceLoc loc = base.span().begin();
                 Span last;
                 if (a1.isEmpty()) last = base.span();
                 else last = a1.get(a1.size()-1).span();
                 Span span = new Span(base.span().fileName(),
                                      loc.line(), last.end().line(),
                                      loc.column(), last.end().column()+1,
                                      base.info().span().begin().offset(),
                                      last.end().offset()+1);
                 return new FunctionCall(NodeUtil.makeASTNodeInfo(span), (Expression)base, toList(a1));
             }};
     };

constant inline Action<Expression> Bracket =
     w opensquare w a1:Expression w closesquare
     { yyValue = new Action<Expression>() {
             public Expression run(Expression base) {
                 SourceLoc loc = base.span().begin();
                 Span span = new Span(base.span().fileName(),
                                      loc.line(), a1.info().span().end().line(),
                                      loc.column()+1, a1.span().end().column()+1,
                                      base.info().span().begin().offset(),
                                      a1.info().span().end().offset()+1);
                 return new Bracket(NodeUtil.makeASTNodeInfo(span), (Expression)base,
                                    Some.<Expression>apply(a1));
             }};
     }
   / w opensquare w closesquare
     { yyValue = new Action<Expression>() {
             public Expression run(Expression base) {
                 Span span = base.span();
                 return new Bracket(NodeUtil.makeASTNodeInfo(span), (Expression)base,
                                    Option.<Expression>apply(null));
             }};
     };

constant inline Action<Expression> Dot =
     w dot w a1:IdName
     { yyValue = new Action<Expression>() {
             public Expression run(Expression base) {
                 return new Dot(NodeUtil.makeASTNodeInfo(Span.merge(base.span(),
                                                                    a1.span())),
                                (Expression)base, a1);
             }};
     };

/*
 * Args ::= ( (w ArgList)? w )
 */
transient List<Expression> Args =
     openparen w closeparen
     { yyValue = list(); }
   / openparen w yyValue:ArgList w closeparen ;

/*
 * ArgList ::=
 *   Expression (w comma w Expression)*
 * | opencurly (w NameValueList)? w closecurly
 */
private transient List<Expression> ArgList =
     a1:Expression a2s:(w void:comma w Expression)*
     { yyValue = cons(a1, a2s.list()); }
   / opencurly a1:(w NameValueList)? w closecurly
     { List<Expression> args;
       if (a1 == null) args = Collections.<Expression>emptyList();
       else args = a1;
       yyValue = args;
     };

/*
 * NameValueList ::=
 *   NameValuePair (w comma NameValuePair)*
 * | EXTENSION: trailing comma
 */
private transient List<Expression> NameValueList =
     a1:NameValuePair a2s:(w void:comma w NameValuePair)* (w comma)?
     { yyValue = cons(a1, a2s.list()); };

/*
 * NameValuePair ::= Id w colon w Expression
 */
private transient Expression NameValuePair =
     Id w colon w a1:Expression { yyValue = a1; };

// new w TypeName
// EXTENSION: new w CallExpression
/*
 * NewExpression ::=
 *   MemberExpression
 * | new w TypeName
 */
private transient Expression NewExpression =
     MemberExpression
   / new w a1:CallExpression
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new NewCall(NodeUtil.makeASTNodeInfo(span), a1);
     }
   / new w a1:TypeName
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new New(NodeUtil.makeASTNodeInfo(span), a1);
     };

/*
 * MemberExpression ::=
 *   PrimaryExpression
 * | MemberExpression w [ w Expression w ]
 * | MemberExpression w . w IdName
 */
Expression MemberExpression =
    seed:PrimaryExpression list:MemberExpressionTail*
    { yyValue = (Expression)apply(list, seed); };

constant transient Action<Expression> MemberExpressionTail =
     MemberBracket
   / MemberDot
   ;

constant inline Action<Expression> MemberBracket =
     w opensquare w a1:Expression w closesquare
     { yyValue = new Action<Expression>() {
             public Expression run(Expression base) {
                 SourceLoc loc = base.span().begin();
                 Span span = new Span(base.span().fileName(), loc.line(),
                                      a1.info().span().end().line(),
                                      loc.column()+1, a1.span().end().column()+1,
                                      base.info().span().begin().offset(), a1.info().span().end().offset()+1);
                 return new Bracket(NodeUtil.makeASTNodeInfo(span), (Expression)base,
                                    Some.<Expression>apply(a1));
             }};
     }
   / w opensquare w closesquare
     { yyValue = new Action<Expression>() {
             public Expression run(Expression base) {
                 Span span = base.span();
                 return new Bracket(NodeUtil.makeASTNodeInfo(span), (Expression)base,
                                    Option.<Expression>apply(null));
             }};
     };

constant inline Action<Expression> MemberDot =
     w dot w a1:IdName
     { yyValue = new Action<Expression>() {
             public Expression run(Expression base) {
                 return new Dot(NodeUtil.makeASTNodeInfo(Span.merge(base.span(),
                                                                    a1.span())),
                                (Expression)base, a1);
             }};
     };

/*
 * PrimaryExpression ::=
 *   Literal
 * | ElementaryTypeName
 * | CollectionLiteral
 * | openparen w Expression w closeparen
 * | Id
 */
private transient Expression PrimaryExpression =
     Literal
   / a1:ElementaryTypeName
     { Span span = createSpan(yyStart,yyCount);
       ASTNodeInfo info = NodeUtil.makeASTNodeInfo(span);
       yyValue = new TypeRef(info, new ElementaryTypeName(info, a1));
     }
   / CollectionLiteral
   / openparen w yyValue:Expression w closeparen
   / a1:Id
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new VarRef(NodeUtil.makeASTNodeInfo(span), a1);
     }
   ;

/*
 * CollectionLiteral ::=
 *   [ w ElementList w ]
 * | ( w ElementList w )
 * | EXTENSION: ( w OptElementList
 */
private transient Expression CollectionLiteral =
     opensquare w a1:ElementList w closesquare
     { Span span = createSpan(yyStart,yyCount+1);
       if (writer != null) { writer.close(); initParser(); }
       yyValue = new ArrayLiteral(NodeUtil.makeASTNodeInfo(span),
                               toList(a1));
     }
   / openparen w a1:ElementList w closeparen
     { Span span = createSpan(yyStart,yyCount+1);
       if (writer != null) { writer.close(); initParser(); }
       yyValue = new TupleLiteral(NodeUtil.makeASTNodeInfo(span),
                               toList(a1));
     }
   / openparen w a1:OptElementList
     { Span span = createSpan(yyStart,yyCount+1);
       if (writer != null) { writer.close(); initParser(); }
       yyValue = new TupleOptLiteral(NodeUtil.makeASTNodeInfo(span),
                               toList(a1));
     };

/*
 * ElementList ::= ElementList w comma w Expression
 */
private transient List<Expression> ElementList =
     seed:ElementListHead list:ElementListTail*
     { yyValue = (List<Expression>)apply(list, seed); };

private transient List<Expression> ElementListHead =
     a1:Expression
     { List<Expression> result = new ArrayList<Expression>();
       yyValue = cons(a1, result);
     };

constant inline Action<List<Expression>> ElementListTail =
     w comma w a1:Expression
     { yyValue = new Action<List<Expression>>() {
             public List<Expression> run(List<Expression> base) {
                 List<Expression> result = new ArrayList<Expression>();
                 result.addAll(base);
                 return list(result, a1);
             }};
     };

/*
 * OptElementList ::=
 *   Expression w comma w OptElementList
 * | w comma w OptElementList
 * | Expression w closeparen
 * | closeparen
 */
private transient List<Option<Expression>> OptElementList =
     a1:Expression w comma w a2:OptElementList
     { yyValue = cons(Some.<Expression>apply(a1), a2); }
   / w comma w a1:OptElementList
     { yyValue = cons(Option.<Expression>apply(null), a1); }
   / a1:Expression w closeparen 
     { yyValue = list(Some.<Expression>apply(a1)); }
   / closeparen 
     { yyValue = Collections.<Option<Expression>>emptyList(); }
   ;
